DJANGO :


Django follows the MVT design pattern (Model View Template).

Model - The data you want to present, usually data from a database.

View - A request handler that returns the relevant template and content - based on the request from the user.

Template - A text file (like an HTML file) containing the layout of the web page, with logic on how to display the data.




 MVT - Model , View, Template



1). The model provides data from the database.


Django, with ORM.  (Object Relational Mapping), 

makes it easier to communicate with the database, without having to write complex SQL statements.



The models are usually located in a file called models.py.




2).  A view is a function or method that takes http requests as arguments, imports the relevant model(s), and finds out what data to send to the template, and returns the final result.


Django views are Python functions that takes http requests and returns http response, like HTML documents.

A web page that uses Django is full of views with different tasks and missions.



The views are usually located in a file called views.py.




3). A template is a file where you describe how the result should be represented.

Django uses standard HTML to describe the layout, but uses Django tags to add logic:



The templates of an application is located in a folder named templates.




4). URLs

Django also provide a way to navigate around the different pages in a website.

When a user requests a URL, Django decides which view it will send it to.

This is done in a file called urls.py.





5). When you have installed Django and created you first Django web application, and the browser requests the URL, this is basically what happens:

Django receives the URL, checks the urls.py file, and calls the view that matches the URL.
The view, located in views.py, checks for relevant models.
The models are imported from the modals.py file.
The view then sends the data to a specified template in the template folder.
The template contains HTML and Django tags, and with the data it returns finished HTML content back to the browser.
Django can do a lot more than this, but this is basically what you will learn in this tutorial, and are the basic steps in a simple web application made with Django.


